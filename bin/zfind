#!/usr/bin/env python
from argparse import ArgumentParser
from os import environ
from os.path import join

from redmonster.application import zfind, zfind2

try: inidir = environ['REDMONSTER_CONF_DIR']
except: inidir = None


parser = ArgumentParser()
parser.add_argument("-s", "--platepath", help="Run Redmonster on this spPlate-PLATE-MJD file",
                    type=str,metavar="SPPLATE")
parser.add_argument("-p", "--plate", help="Run Redmonster on this Plate",
                    type=int,metavar="PLATE")
parser.add_argument("-m", "--mjd", help="Run Redmonster on this MJD",
                    type=int,metavar="MJD")
parser.add_argument("-f", "--fiberid", help="Run Redmonster on this fiber",
                    type=int,metavar="FIBERID")
parser.add_argument("-j", "--datamin", help="Minimum wavelength of data to use",
                    type=int, metavar="DATAMIN")
parser.add_argument("-k", "--datamax", help="Maximum wavelength of data to use",
                    type=int, metavar="DATAMAX")
parser.add_argument("-i", "--inifile", help="templates configuration ini file \
                    [default zfind.ini]",type=str, default="zfind.ini",
                    metavar="INIFILE")
parser.add_argument("-c", "--clobber", help="clobber this PLATE/MJD",
                    action="store_true")
parser.add_argument("-d", "--dest", help="overide REDMONSTER_SPECTRO_REDUX",
                    type=str, metavar="DEST")
parser.add_argument("-n", "--nproc", help="number of procs to use",
                    type=int, metavar="NPROC")
parser.add_argument("--mask", help="Apply mask in redmonster._linelist", action="store_true")

arg = parser.parse_args()
if not arg.platepath: 
    arg.platepath=None

if not arg.platepath and not arg.plate: parser.error("Please specify a valid --plate or --platepath")
if not arg.platepath and not arg.mjd: parser.error("Please specify a valid --mjd")
inifile = join(inidir,arg.inifile) if inidir else arg.inifile

data_range = []
try:
    data_range.append(arg.datamin)
    data_range.append(arg.datamax)
except:
    data_range = None

if arg.nproc is not None:
    zf = zfind2.ZFind(inifile=inifile, dest=arg.dest, nproc=arg.nproc,
                      mask=arg.mask, clobber=arg.clobber)
    zf.reduce_plate_mjd(arg.plate, arg.mjd, arg.fiberid, data_range=data_range,
                        chi2file=False, platepath=arg.platepath)
else:
    zf = zfind2.ZFind(inifile=inifile, dest=arg.dest, mask=arg.mask, clobber=arg.clobber)
    zf.reduce_plate_mjd(arg.plate, arg.mjd, arg.fiberid, data_range=data_range,
                        chi2file=False, platepath=arg.platepath)

# Delete QSO and CAP chi2files
from os import remove
#remove( join( environ['REDMONSTER_SPECTRO_REDUX'], environ['RUN2D'],
              #'%s' % arg.plate, environ['RUN1D'],
              #'chi2arr-QSO-%s-%s-%03d.fits' % (arg.plate, arg.mjd,
                                                #arg.fiberid) ) )
#remove( join( environ['REDMONSTER_SPECTRO_REDUX'], environ['RUN2D'],
              #'%s' % arg.plate, environ['RUN1D'],
              #'chi2arr-CAP-%s-%s-%03d.fits' % (arg.plate, arg.mjd,
                                                #arg.fiberid) ) )


""" usage
zfind -p 8123 -m 56931 --inifile mytemplates.ini --clobber
zfind -p 8123 -m 56931 --clobber
zfind -p 8123 -m 56931 -f 0 --clobber
zfind - 8123 -m 56931 -d [4000,9000]"""



